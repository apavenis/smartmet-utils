#! /usr/bin/perl

use strict;
use File::Compare;

if ( ! -f ".circleci/config.yml" ) {
    print "Skipping Circle-CI config generation as .circleci/config.yml not found\n";
    exit 1;
}

@::versions = ();
$::home = $ENV{HOME};
if ( -f "$::home/.ci-rhel-versions" ) {
    open INPUT, "<", "$::home/.ci-rhel-versions"
        or die "Failed to open $::home/.ci-rhel-versions: $!";
    my $input = <INPUT>;
    @::versions = split ' ', $input;
} else {
    @::versions = (8);
}

my $output;
open $output, ">", ".circleci/config.yml.new"
    or die "Failed to open .circleci/config.yml.new for writing: $!";

print "Generating Circle-CI configuration\n";

print $output "version: 2.1\n";
print $output "jobs:\n";

for my $ver (@::versions) {
    print "Generated step build-rhel$ver\n";

    print $output "  build-rhel$ver:\n";
    print $output "    docker:\n";
    print $output "      - image: fmidev/smartmet-cibase-$ver:latest\n";
    print $output "    resource_class: xlarge\n";
    print $output "    environment:\n";
    print $output "      RPM_BUILD_NCPUS: 8\n";
    print $output "    steps:\n";
    print $output "      - checkout\n";
    print $output "      - run:\n";
    print $output "          name: Install build dependencies\n";
    print $output "          command: ci-build deps\n";
    print $output "      - run:\n";
    print $output "          name: Build RPM\n";
    print $output "          command: ci-build rpm\n";
    print $output "      - persist_to_workspace:\n";
    print $output "          root: /dist\n";
    print $output "          paths: ./*.rpm\n";

    if ( ! -f ".circleci/disable-tests-in-ci" ) {
        print "Generated step test-rhel$ver\n";

        print $output "  test-rhel$ver:\n";
        print $output "    docker:\n";
        print $output "      - image: fmidev/smartmet-cibase-$ver:latest\n";
        print $output "    resource_class: xlarge\n";
        print $output "    environment:\n";
        print $output "      RPM_BUILD_NCPUS: 8\n";
        print $output "    steps:\n";
        print $output "      - checkout\n";
        print $output "      - attach_workspace:\n";
        print $output "          at: /dist\n";
        print $output "      - run:\n";
        print $output "          name: Installation test\n";
        print $output "          command: ci-build dummy ; sudo yum install -y /dist/*.rpm\n";
        print $output "      - run:\n";
        print $output "          name: Test prepare\n";
        print $output "          command: ci-build testprep\n";
        print $output "      - run:\n";
        print $output "          name: Test\n";
        print $output "          command: ci-build test\n";
        print $output "      - store_artifacts:\n";
        print $output "          path: /dist\n";
        print $output "          destination: dist/\n";
    }

    # This is currently for WFS only
    if ( -f ".circleci/include-unit-test-step" ) {
        print "Generated step unit-test-rhel$ver\n";

        print $output "  unit-test-rhel$ver:\n";
        print $output "    docker:\n";
        print $output "      - image: fmidev/smartmet-cibase-$ver:latest\n";
        print $output "    resource_class: xlarge\n";
        print $output "    environment:\n";
        print $output "      RPM_BUILD_NCPUS: 8\n";
        print $output "    steps:\n";
        print $output "      - checkout\n";
        print $output "      - attach_workspace:\n";
        print $output "          at: /dist\n";
        print $output "      - run:\n";
        print $output "          name: Install build dependencies\n";
        print $output "          command: ci-build deps\n";
        print $output "      - run:\n";
        print $output "          name: Installation test\n";
        print $output "          command: ci-build dummy ; sudo yum install -y /dist/*.rpm\n";
        print $output "      - run:\n";
        print $output "          name: Unit tests\n";
        print $output "          command: make check-installed CXX=clang++\n";
        print $output "      - store_artifacts:\n";
        print $output "          path: /dist\n";
        print $output "          destination: dist/\n";
    }

    print "Generated step upload-rhel$ver\n";

    print $output "  upload-rhel$ver:\n";
    print $output "    docker:\n";
    print $output "      - image: fmidev/smartmet-cibase-$ver:latest\n";
    print $output "    steps:\n";
    print $output "      - attach_workspace:\n";
    print $output "          at: /dist\n";
    print $output "      - run:\n";
    print $output "          name: Installing AWS CLI\n";
    print $output "          working_directory: /\n";
    print $output "          command: |\n";
    print $output "            sudo yum -y install dnf\n";
    print $output "            sudo dnf -y install python3-pip\n";
    print $output "            pip3 install awscli --upgrade --user\n";
    print $output "      - run:\n";
    print $output "          name: Sync artifacts to S3\n";
    print $output "          command: |\n";
    print $output "            export PATH=\$PATH:~/.local/bin\n";
    print $output "            aws s3 cp /dist s3://fmi-smartmet-cicd-beta/centos$ver/ --recursive\n";
}

print $output "workflows:\n";
print $output "  version: 2.1\n";
print $output "  build-test:\n";
print $output "    jobs:\n";

for my $ver (@::versions) {
    print $output "      - build-rhel$ver\n";
}

for my $ver (@::versions) {
    if ( ! -f ".circleci/disable-tests-in-ci" ) {
        print $output "      - test-rhel$ver:\n";
        print $output "          requires:\n";
        print $output "            - build-rhel$ver\n";
    }
    if ( -f ".circleci/include-unit-test-step" ) {
        print $output "      - unit-test-rhel$ver:\n";
        print $output "          requires:\n";
        print $output "            - build-rhel$ver\n";
    }
}

for my $ver (@::versions) {
    print $output "      - upload-rhel$ver:\n";
    print $output "          context: fmi-global\n";
    print $output "          requires:\n";
    if ( -f ".circleci/disable-tests-in-ci" ) {
        print $output "            - build-rhel$ver\n";
    } else {
        print $output "            - test-rhel$ver\n";
    }
    if ( -f ".circleci/include-unit-test-step" ) {
        print $output "            - unit-test-rhel$ver\n";
    }
}

close $output;

if (compare(".circleci/config.yml", ".circleci/config.yml.new") == 0) {
    print "No changed detected.\n";
    unlink(".circleci/config.yml.new");
} else {
    if ( -f ".circleci/config.yml~" ) {
        unlink(".circleci/config.yml~");
    }
    rename(".circleci/config.yml", ".circleci/config.yml~") or
        die "rename .circleci/config.yml -> .circleci/config.yml~: $!";
    rename(".circleci/config.yml.new", ".circleci/config.yml") or
        die "rename .circleci/config.yml.new -> .circleci/config.yml: $!";
    print ".circleci/config.yml updated\n";
}

exit(0);
